AWSTemplateFormatVersion: 2010-09-09

### TODO: update to remove node build parts
###
### Template: aws-cfn-s3web-pipeline-html.yaml
### Authors:  Billy Glenn
###           John Nichols
###
### Purpose:  This template creates an S3 bucket, enables
###           static web hosting, and established a CodePipeline
###           with CodeBuild and CodeDeploy for managing CI/CD
###           Pipeline from GitHub repo through deployment to S3
###
### Related Templates:
###           aws-cfn-cloudfront.yaml:  Creates CloudFront CDN
###           with WAF rules
###           aws-cfn-certificate.yaml:  Automates creation of
###           ACM Certificate including DNS validation records
###
###

### Metadata
Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 

      - 
        Label: 
          default: "Website Details"
        Parameters: 
          - pWebsiteFQDN
#         - pWebsiteDomainName
          - pReferer
      -
        Label:
          default: "GitHub Details"
        Parameters:
          - pGitHubAccount
          - pGitHubRepo
          - pGitHubRepoBranch
          - pGitHubToken

      -
        Label:
          default: "Tag Details"
        Parameters: 
          - pApplicationName
          - pAppID
          - pEnv
          - pCFNOwnerTag

          

    ParameterLabels:

      pWebsiteFQDN:
        default: "Fully-Qualified Domain Name for website / application"
      # pWebsiteDomainName:
      #   default: "Domain name suffix (e.g. ss.pge.com)"  
      pReferer:
        default: "Referrer Value for S3 access constraint"

      pGitHubAccount:
        default: "GitHub Account"
      pGitHubRepo:
        default: "Repository Name"
      pGitHubRepoBranch:
        default: "Repository Branch"
      pGitHubToken:
        default: "Service Account OAuth Token"

      pApplicationName:
        default: "Application Name"  
      pEnv:
        default: "Environment"
      pCFNOwnerTag:
        default: "CorpID of resource owner"

### Parameters
Parameters:

  #Website Details
  pWebsiteFQDN:
    Type: 'String'
    Description: "The Fully-Qualified Domain Name for the website/application"
  # pWebsiteDomainName:
  #   Type: 'String'
  #   Description: "The Domain Name SUFFIX - e.g. ss-dev.pge.com"
  pReferer:
    Type: 'String'
    Description: "The referer header value for restricting access to S3 (Will be stored in AWS Secrets Manager) "
    NoEcho: true

  #GitHub Details
  pGitHubAccount:
    Type: 'String'
    Default: 'pgetech'
    Description: "Enter the GitHub Account Name (e.g. pgetech)"
  pGitHubRepo:
    Type: 'String'
    Description: "Enter the GitHub Repo Name (just the repo, no prefix or FQDN)"
  pGitHubRepoBranch:
    Type: 'String'
    Default: 'dev'
    Description: "Enter the Branch you wish to pull from in the GitHub repo"
  pGitHubToken:
    Type: 'String'
    Description: "Enter the GitHub Token (consider using AWS Secrets to store this value)"
    NoEcho: true

  #Tag Details
  pCFNOwnerTag:
    Type: 'String'
    Description: "The owner of this stack (for tagging of resources)"
  pEnv:
    Type: 'String'
    Description: "The environment: Dev, Test, QA, Prod"
  pApplicationName:
    Type: 'String'
    Description: "The 'friendly' name of the application"
  pAppID:
    Type: 'String'
    Description: "AMPS ApplicationID"



Resources:
  rPipelineBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join [ "", [!Ref pWebsiteFQDN, "-artifacts"] ]
      Tags:
        - Key: Owner
          Value: !Ref pCFNOwnerTag
        - Key: AppID
          Value: !Ref pAppID
        - Key: ENV
          Value: !Ref pEnv
        - Key: AppName
          Value: !Ref pApplicationName
  rWebsiteBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref pWebsiteFQDN
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      Tags:
        - Key: CFNOwner
          Value: !Ref pCFNOwnerTag
        - Key: ENV
          Value: !Ref pEnv
        - Key: AppName
          Value: !Ref pApplicationName
  rWebsiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref rWebsiteBucket
      PolicyDocument:
         Statement:
          - Sid: "Allow Requests"
            Action:
              - 's3:GetObject'
            Effect: 'Allow'
            Resource: 
              - !Join
                - ''
                - - "arn:aws:s3:::"
                  - !Ref rWebsiteBucket
                  - '/*'
            Principal: '*'
            Condition: 
              StringLike: 
                aws:Referer: !Ref pReferer
                aws:UserAgent: Amazon CloudFront
          - Sid: "Deny Requests"
            Action:
              - 's3:GetObject'
            Effect: 'Deny'
            Resource: 
              - !Join
                - ''
                - - "arn:aws:s3:::"
                  - !Ref rWebsiteBucket
                  - '/*'
            Principal: '*'
            Condition: 
              StringNotLike: 
                aws:Referer: !Ref pReferer
                aws:UserAgent: Amazon CloudFront
  rPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
    Properties:
      Name: !Sub '${AWS::StackName}-PIPELINE-${pEnv}'
      RoleArn: !GetAtt rPipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location:
          Ref: rPipelineBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOuput
              Configuration:
                Owner: !Ref pGitHubAccount
                Repo: !Ref pGitHubRepo
                PollForSourceChanges: 'true'
                Branch: !Ref pGitHubRepoBranch
                OAuthToken: !Ref pGitHubToken
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              InputArtifacts:
                - Name: SourceOuput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName:
                  Ref: rBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: CodeBuild
              InputArtifacts:
                - Name: BuildOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: DeployOutput
              Configuration:
                ProjectName:
                  Ref: rDeployProject
              RunOrder: 1
  rPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-PIPELINE-ROLE-${pEnv}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [codepipeline.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-PIPELINE-POLICY-${pEnv}'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 'logs:DescribeLogStreams'
              Resource: '*'
            - Effect: Allow
              Action:
                - 'codebuild:BatchGetBuilds'
              Resource: '*'
            - Effect: Allow
              Action:
                - 'codebuild:StartBuild'
              Resource:
                - !GetAtt rBuildProject.Arn
                - !GetAtt rDeployProject.Arn
            - Effect: Allow
              Action:
                - 's3:PutObject'
                - 's3:ListObjects'
                - 's3:GetObject'
                - 's3:ListBucket'
              Resource:
                - !GetAtt rPipelineBucket.Arn
                - !Join
                  - ''
                  - - !GetAtt rPipelineBucket.Arn
                    - '/*'
              Resource: '*'
  rBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub '${AWS::StackName}-BUILDPROJECT-${pEnv}'
      ServiceRole: !Ref rBuildProjectRole
      BadgeEnabled: 'false'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: 'false'
        Image: node:8
        EnvironmentVariables:
            -
                Name: GITHUBTOKEN
                Type: PLAINTEXT
                Value: !Ref pGitHubToken
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
            version: 0.2
            env:
              variables:
                GITHUBTOKEN: ${pGitHubToken}
            phases:
              install:
                commands:
                  - echo Build started on `date`
                  - echo Instaling packages
                  - apt-get update && apt-get install zip -y
              post_build:
                commands:
                  - echo Transferring files to S3
                  - zip -r deploy.zip html/
            artifacts:
              files:
                - deploy.zip
      TimeoutInMinutes: 10
      Cache:
        Type: NO_CACHE
      Tags:
        - Key: CFNOwner
          Value: !Ref pCFNOwnerTag
        - Key: ENV
          Value: !Ref pEnv
        - Key: AppName
          Value: !Ref pApplicationName
  rBuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-BUILDPROJECT-ROLE-${pEnv}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [codebuild.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-BUILDPROJECT-POLICY-${pEnv}'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 'logs:DescribeLogStreams'
              Resource: '*'
            - Effect: Allow
              Action:
                - 's3:PutObject'
                - 's3:ListObjects'
                - 's3:GetObject'
                - 's3:ListBucket'
              Resource:
                - !GetAtt rPipelineBucket.Arn
                - !Join
                  - ''
                  - - !GetAtt rPipelineBucket.Arn
                    - '/*'
  rDeployProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub '${AWS::StackName}-DEPLOYPROJECT-${pEnv}'
      ServiceRole: !Ref rDeployProjectRole
      BadgeEnabled: 'false'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: 'false'
        Image: aws/codebuild/nodejs:6.3.1
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
            version: 0.2
            phases:
              build:
                commands:
                  - echo Transferring files to S3
                  - unzip deploy.zip
                  - aws s3 cp html/ s3://${rWebsiteBucket}/ --recursive --region ${AWS::Region}
                  - echo Build completed on `date`
      TimeoutInMinutes: 10
      Cache:
        Type: NO_CACHE
      Tags:
        - Key: CFNOwner
          Value: !Ref pCFNOwnerTag
        - Key: ENV
          Value: !Ref pEnv
        - Key: AppName
          Value: !Ref pApplicationName
  rDeployProjectRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-DEPLOYPROJECT-ROLE-${pEnv}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [codebuild.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-DEPLOYPROJECT-POLICY-${pEnv}'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 'logs:DescribeLogStreams'
              Resource: '*'
            - Effect: Allow
              Action:
                - 's3:PutObject'
                - 's3:ListObjects'
                - 's3:GetObject'
                - 's3:ListBucket'
              Resource:
                - !GetAtt rPipelineBucket.Arn
                - !Join
                  - ''
                  - - !GetAtt rPipelineBucket.Arn
                    - '/*'
            - Effect: Allow
              Action:
                - 's3:PutObject'
              Resource:
                - !GetAtt rWebsiteBucket.Arn
                - !Join
                  - ''
                  - - !GetAtt rWebsiteBucket.Arn
                    - '/*'

Outputs:
  oWebsiteUrl:
    Value: !GetAtt rWebsiteBucket.WebsiteURL
    Description: The S3 Website URL
